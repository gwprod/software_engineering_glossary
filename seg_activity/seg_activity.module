<?php

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

function seg_activity_menu() {
  $menu['class/%seg_class/activity'] = array(
    'title' => t('Activities'),
    'page callback' => 'seg_activity_list_activities',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_LOCAL_TASK
  );
  $menu['class/%seg_class/activity/new'] = array(
    'title' => t('New Activity'),
    'page callback' => 'seg_activity_new_activity',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_LOCAL_TASK
  );
  $menu['class/%seg_class/activity/new/%'] = array(
    'title' => t('New Activity'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('seg_activity_form', 1, NULL, 4),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );
  $menu['class/%seg_class/activity/%seg_activity'] = array(
    
    'title callback' => 'seg_activity_title',
    'title arguments' => array(3),
    'page callback' => 'seg_activity_view',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM
  );
  $menu['class/%seg_class/activity/%seg_activity/view'] = array(
    'title' => t('View Activity'),
    'page callback' => 'seg_activity_view',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -100
  );
  $menu['class/%seg_class/activity/%seg_activity/do'] = array(
    'title' => t('Do Activity'),
    'page callback' => 'seg_activity_do',
    'page arguments' => array(1, 3),
    'access arguments' => array('access content'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -99
  );
  $menu['class/%seg_class/activity/%seg_activity/edit'] = array(
    'title' => t('Edit Activity'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('seg_activity_form', 1, 3),
    'access arguments' => array('access content'),
    'type' => MENU_LOCAL_TASK,
    'weight' => -98
  );
  $menu['class/%seg_class/activity/%seg_activity/delete'] = array(
    'title' => t('Delete Activity'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('seg_activity_form', 1, 3),
    'access arguments' => array('access content'),
    'type' => MENU_LOCAL_TASK,
    'weight' => -97
  );
  return $menu;
}

function seg_activity_view($activity)
{
  if (isset($activity) && !isset($activity_type)) {
    $activity_type = seg_activity_activity_from_bundle($activity->type);
  }
  $activity_info = seg_activity_info_load($activity_type);
  $callback = $activity_info['formatter callback'];
  return $callback($activity);
}
function seg_activity_activity_from_bundle($bundle) {
  $activity_types = seg_activity_info_load();
  foreach ($activity_types as $activity_name => $activity_info) {
    if ($activity_info['bundle'] == $bundle)
      return $activity_name;
  }
  return 'activity';
}

function seg_activity_form($form, &$form_state, $class, $activity = null, $activity_type = null) {


  if (isset($activity) && !isset($activity_type)) {
    $activity_type = seg_activity_activity_from_bundle($activity->type);
  }
  $activity_info = seg_activity_info_load($activity_type);
  $form['data'] = $activity_info['form callback']($form, $form_state, $class, $activity);

  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t($activity_info['title'] . ' Name'),
    '#default_value' => isset($activity) ? $activity->title : '',
    '#weight' => -100,
    '#required' => TRUE
  );
  $form['description'] = array(
    '#type' => 'textarea',
    '#title' => t($activity_info['title'] . ' Description'),
    '#default_value' => isset($activity) ? $activity->description : '',
    '#weight' => -99
  );
  $form['score'] = array(
    '#type' => 'textfield',
    '#title' => t($activity_info['title'] . ' Total Points'),
    '#description' => t('The total points available for this activity.'),
    '#default_value' => isset($activity) ? $activity->score : 40,
    '#weight' => -98
  );
  $form['due_date'] = array(
    '#title' => t('Due Date'),
    '#description' => t('Due Date.'),
    '#label' => '',
    '#size' => 10,
    '#type' => 'date_popup',
    '#date_format' => 'm-d-Y g:ia',
    '#date_increment' => 1,
    '#date_year_range' => '0:+5',
    '#default_value' => date('Y-m-d H:i:s', isset($activity->due_date) ? $activity->due_date : time()),
    '#date_label_position' => 'none',
    '#show_description' => false,
    '#weight' => -97
  );
  $form['class_id'] = array(
    '#type' => 'hidden',
    '#value' => $class->class_id
  );
  $form['activity_type'] = array(
    '#type' => 'hidden',
    '#value' => $activity_type
  );
  $form['type'] = array(
    '#type' => 'hidden',
    '#value' => $activity_info['bundle']
  );
  if (isset($activity)) {
    $form['activity_id'] = array(
      '#type' => 'hidden',
      '#value' => $activity->activity_id
    );
  }
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => isset($activity) ? t('Save Activity') : t('Create Activity')
  );
  return $form;
}

function seg_activity_form_submit($form, &$form_state) {
  watchdog('seg_activity_form_submit', print_r($form_state, TRUE));
  if (isset($form_state['values']['activity_id'])) {
    $activity = seg_activity_load($form_state['values']['activity_id']);
    foreach ($form_state['values'] as $key => $value) {
      if(isset($form_state['complete form'][$key]['#type']) && $form_state['complete form'][$key]['#type'] == 'date_popup')
      {
        $activity->$key = strtotime($value);
      } else {
        $activity->$key = $value;
      }
      
    }
  }
  else {
    $activity = entity_get_controller('seg_activity')->create($form_state['values']);
  }
  $activity_info = seg_activity_info_load($form_state['values']['activity_type']);
  // execute any submit handlers defined by the submit callback
  if (isset($activity_info['submit callback']) && function_exists($activity_info['submit callback'])) {

    $activity_info['submit callback']($form, $form_state);
    // peel out form_state values...
  }
  $data_children = array_keys($form_state['complete form']['data']);
  foreach ($data_children as $child) {
    if (isset($form_state['values'][$child])) {
      $activity->data[$child] = $form_state['values'][$child];
    }
  }
  //$data_children = $form
  entity_save('seg_activity', $activity);
  $form_state['redirect'] = 'class/' . $activity->class_id . '/activity';
  //watchdog('seg_activity_form_submit', print_r($activity, TRUE));
}
function seg_activity_submission_list_submissions($activity, $submissions)
{
  
  $rows = array();
  foreach($submissions as $submission)
  {
    $rows[] = array(
      'submitted' => format_date($submission->changed),
      'status' => ($submission->status == 1) ? t('Submitted') : t('In Progress'),
      'score' => $submission->score . ' out of ' . $activity->score
    );
  }
  $content['table'] = array(
    '#theme' => 'table',
    '#title' => t('Previous Submissions'),
    '#empty' => t('No Previous Submissions'),
    '#header' => array(t('Date Submitted'), t('Score'), t('Status')),
    '#rows' => $rows
  );
  return $content;
}
function seg_activity_permission()
{
  return array(
    'create activity' => array(
      'title' => t('Create Activity'),
      'description' => 'Create a new activity.'
    ),
    'edit own activity' => array(
      'title' => t('Edit Own Activity'),
      'description' => 'Edit an activity in a class you can edit.'
    ),
    'edit any activity' => array(
      'title' => t('Edit Any Activity'),
      'description' => 'Edit any activity.'
    ),
    'delete own activity' => array(
      'title' => t('Delete Own Activity'),
      'description' => 'Delete an activity in a class you can edit.'
    ),
    'delete any activity' => array(
      'title' => t('Delete Any Activity'),
      'description' => 'Delete any activity.'
    )
  );
}
function seg_activity_submission_view($submission)
{
  $submission->content = array();
  
  return $submission->content;
}
function seg_activity_access($permission, $class, $activity = null)
{
  $access = false;
  switch($permission)
  {
    case 'edit activity':
      $access =  user_access('edit any activity') || (user_access('edit own activity') && seg_class_access('edit class', $class));
      break;
    case 'create activity':
      $access = user_access('create activity') && seg_class_access('edit class', $class);
      break;
  }
  return $access;
}
function seg_activity_list_activities($class)
{
  $query = db_select('seg_activity', 'sa');
  $query->fields('sa', array('activity_id'));
  $query->condition('sa.class_id', $class->class_id);
  $query->condition('state', 1);
  $result = $query->execute();
  $activity_ids = $result->fetchAllAssoc('activity_id');
  $activities = seg_activity_load_multiple(array_keys($activity_ids));
  $rows = array();
  $can_edit = false;
  foreach($activities as $activity)
  {
    $url = $activity->uri();
    //format_date
    $rows[$activity->activity_id] = array(
      'title' => l($activity->title, $url['path']),
      'due_date' => format_date($activity->due_date),
      'points' => $activity->score
    );
    if(seg_activity_access('edit activity', $activity))
    {
      $can_edit = TRUE;
      $rows[$activity->activity_id]['edit'] = l('Edit', 'class/' . $class->class_id . '/activity/' . $activity->activity_id . '/edit');
    }
  }
  $header = array(t('Activity Name'), t('Due Date'), t('Possible Points'));
  if($can_edit)
  {
    $header[] = t('Edit');
  }
  $content['new_activity'] = array(
    '#theme' => 'link',
    '#text' => 'Create Activity',
    '#path' => 'class/' . $class->class_id . '/activity/new',
    '#weight' => -100,
    '#options' => array(
      'attributes' => array('class' => array('button'), 'id' => 'new-task'),
      //REQUIRED:
      'html' => FALSE,
    ),
    '#access' => user_access('create activity')
  );
  $content['class_list'] = array(
    '#theme' => 'table',
    '#rows' => $rows,
    '#empty' => t('No Activities'),
    '#header' => $header,
    '#attributes' => array(
      ''
    )
  );
  return $content;
}
function seg_activity_new_activity($class) {
  $activities = seg_activity_info_load();
  $items = array();
  if (!empty($activities)) {
    foreach ($activities as $activity_name => $activity) {
      $items[] = array(
        'data' => l($activity['title'], 'class/' . $class->class_id . '/activity/new/' . $activity_name)
      );
    }
  }
  else {
    $items[] = array(
      'data' => t('No Activities Available.')
    );
  }
  $content['item_list'] = array(
    '#theme' => 'item_list',
    '#items' => $items,
    '#title' => t('Create New Activity'),
  );
  return $content;
}

function seg_activity_info_load($activity = null) {
  $activities = module_invoke_all('seg_activity_info');
  if (isset($activity)) {
    return $activities[$activity];
  }
  return $activities;
}

function seg_activity_entity_info() {
  $return = array(
    'seg_activity' => array(
      'label' => t('SEG Activity'),
      'entity class' => 'SEGActivity',
      'controller class' => 'SEGActivityController',
      'base table' => 'seg_activity',
      'revision table' => 'seg_activity_revision',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'activity_id',
        'bundle' => 'type',
        'revision' => 'revision_id'
      ),
      'bundle keys' => array(
        'bundle' => 'type',
      ),
      'bundles' => array(
        'seg_activity' => array(
          'label' => 'SEG Activity',
          'admin' => array(
            'path' => 'admin/structure/seg_activity/manage',
            'access arguments' => array('administer activities'),
          ),
        ),
      ),
      'load hook' => 'seg_activity_load',
      'view modes' => array(
        'default' => array(
          'label' => t('Default'),
          'custom settings' => TRUE,
        ),
        'full' => array(
          'label' => t('Full'),
          'custom settings' => TRUE,
        )
      ),
      'label callback' => 'entity_class_label',
      'uri callback' => 'entity_class_uri',
      'module' => 'seg_activity',
      'access callback' => 'seg_activity_access',
    ),
    'seg_activity_submission' => array(
      'label' => t('SEG Activity Submission'),
      'entity class' => 'SEGActivitySubmission',
      'controller class' => 'SEGActivitySubmissionController',
      'base table' => 'seg_activity_submission',
      
      'fieldable' => FALSE,
      'entity keys' => array(
        'id' => 'submission_id',
        'bundle' => 'type',
        
      ),
      'bundle keys' => array(
        'bundle' => 'type',
      ),
      'bundles' => array(
        'seg_activity_submission' => array(
          'label' => 'SEG Activity',
          'admin' => array(
            'path' => 'admin/structure/seg_activity/manage',
            'access arguments' => array('administer activities'),
          ),
        ),
      ),
      'load hook' => 'seg_activity_submission_load',
      'view modes' => array(
        'default' => array(
          'label' => t('Default'),
          'custom settings' => TRUE,
        ),
        'full' => array(
          'label' => t('Full'),
          'custom settings' => TRUE,
        )
      ),
      'label callback' => 'entity_class_label',
      'uri callback' => 'entity_class_uri',
      'module' => 'seg_activity',
      'access callback' => 'seg_activity_submission_access',
    ),
  );
  return $return;
}

function seg_activity_submission_create($activity, $values = array())
{
  $submission = entity_get_controller('seg_activity_submission')->create(array(
    'activity_id' => $activity->activity_id
  ));
  $submission->data = $values;
  entity_save('seg_activity_submission', $submission);
  return $submission;
}
function seg_activity_submission_get_submissions($activity, $user)
{
  $result = db_query('select submission_id from {seg_activity_submission} where uid=:uid and activity_id = :activity_id', array('uid' => $user->uid, 'activity_id' => $activity->activity_id));
  $submission_ids = $result->fetchAllAssoc('submission_id');
  return seg_activity_submission_load_multiple(array_keys($submission_ids));
}
class SEGActivitySubmission extends Entity {

  protected function defaultLabel() {
    return html_entity_decode($this->title);
  }

  protected function defaultUri() {

    return array('path' => 'class/' . $this->class_id . '/activity/' . $this->activity_id . '/submission/' . $this->identifier());
  }

}
class SEGActivitySubmissionController extends EntityAPIController {

  public function create(array $values = array()) {
    global $user;
    $values += array(
      
      'created' => REQUEST_TIME,
      'changed' => REQUEST_TIME,
      'uid' => $user->uid,
      'type' => 'seg_activity_submission'
    );
    return parent::create($values);
  }

  public function buildContent($entity, $view_mode = 'full', $langcode = NULL, $content = array()) {
    $wrapper = entity_metadata_wrapper('seg_activity', $entity);
//$content['author'] = array('#markup' => t('Created by: !author', array('!author' => $wrapper->uid->name->value(array('sanitize' => TRUE)))));
// Make Description and Status themed like default fields.
    $extra_fields = field_info_extra_fields('seg_activity', 'seg_activity', 'display');
    //print_r($extra_fields);
    $content['title'] = array(
      '#theme' => 'field',
      '#weight' => $extra_fields['title']['display'][$view_mode]['weight'],
      '#title' => t('Title'),
      '#access' => TRUE,
      '#label_display' => 'above',
      '#view_mode' => 'full',
      '#language' => LANGUAGE_NONE,
      '#field_name' => 'field_fake_title',
      '#field_type' => 'text',
      '#entity_type' => 'seg_activity',
      '#bundle' => $entity->type,
      '#items' => array(array('value' => $entity->title)),
      '#formatter' => 'text_default',
      0 => array('#markup' => check_plain($entity->title))
    );
    $content['description'] = array(
      '#theme' => 'field',
      '#weight' => $extra_fields['description']['display'][$view_mode]['weight'],
      '#title' => t('Description'),
      '#access' => TRUE,
      '#label_display' => 'above',
      '#view_mode' => 'full',
      '#language' => LANGUAGE_NONE,
      '#field_name' => 'field_fake_description',
      '#field_type' => 'text',
      '#entity_type' => 'seg_activity',
      '#bundle' => $entity->type,
      '#items' => array(array('value' => $entity->description)),
      '#formatter' => 'text_default',
      0 => array('#markup' => check_plain($entity->description))
    );

    return parent::buildContent($entity, $view_mode, $langcode, $content);
  }

}
class SEGActivity extends Entity {

  protected function defaultLabel() {
    return html_entity_decode($this->title);
  }

  protected function defaultUri() {

    return array('path' => 'class/' . $this->class_id . '/activity/' . $this->identifier());
  }

}

class SEGActivityController extends EntityAPIController {

  public function create(array $values = array()) {
    global $user;
    $values += array(
      'term' => '',
      'description' => '',
      'created' => REQUEST_TIME,
      'changed' => REQUEST_TIME,
      'uid' => $user->uid,
      'type' => 'seg_activity'
    );
    return parent::create($values);
  }

  public function buildContent($entity, $view_mode = 'full', $langcode = NULL, $content = array()) {
    $wrapper = entity_metadata_wrapper('seg_activity', $entity);
//$content['author'] = array('#markup' => t('Created by: !author', array('!author' => $wrapper->uid->name->value(array('sanitize' => TRUE)))));
// Make Description and Status themed like default fields.
    $extra_fields = field_info_extra_fields('seg_activity', 'seg_activity', 'display');
    //print_r($extra_fields);
    $content['title'] = array(
      '#theme' => 'field',
      '#weight' => $extra_fields['title']['display'][$view_mode]['weight'],
      '#title' => t('Title'),
      '#access' => TRUE,
      '#label_display' => 'above',
      '#view_mode' => 'full',
      '#language' => LANGUAGE_NONE,
      '#field_name' => 'field_fake_title',
      '#field_type' => 'text',
      '#entity_type' => 'seg_activity',
      '#bundle' => $entity->type,
      '#items' => array(array('value' => $entity->title)),
      '#formatter' => 'text_default',
      0 => array('#markup' => check_plain($entity->title))
    );
    $content['description'] = array(
      '#theme' => 'field',
      '#weight' => $extra_fields['description']['display'][$view_mode]['weight'],
      '#title' => t('Description'),
      '#access' => TRUE,
      '#label_display' => 'above',
      '#view_mode' => 'full',
      '#language' => LANGUAGE_NONE,
      '#field_name' => 'field_fake_description',
      '#field_type' => 'text',
      '#entity_type' => 'seg_activity',
      '#bundle' => $entity->type,
      '#items' => array(array('value' => $entity->description)),
      '#formatter' => 'text_default',
      0 => array('#markup' => check_plain($entity->description))
    );

    return parent::buildContent($entity, $view_mode, $langcode, $content);
  }

}

function seg_activity_load($activity_id, $reset = false) {
  $activity_ids = (isset($activity_id) ? array($activity_id) : array());
  $activity = seg_activity_load_multiple($activity_ids, array(), $reset);
  return $activity ? reset($activity) : FALSE;
}
function seg_activity_submission_load($submission_id, $reset = false) {
  $submission_ids = (isset($submission_id) ? array($submission_id) : array());
  $submission = seg_activity_submission_load_multiple($submission_ids, array(), $reset);
  return $submission ? reset($submission) : FALSE;
}
function seg_activity_load_multiple($activity_ids = array(), $conditions = array(), $reset = false) {
  return entity_load('seg_activity', $activity_ids, $conditions, $reset);
}
function seg_activity_submission_load_multiple($submission_ids = array(), $conditions = array(), $reset = false) {
  return entity_load('seg_activity_submission', $submission_ids, $conditions, $reset);
}
?>
