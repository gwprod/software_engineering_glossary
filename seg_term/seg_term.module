<?php

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
function seg_term_entity_info() {
  $return = array(
    'seg_term' => array(
      'label' => t('SEG Term'),
      'entity class' => 'SEGTerm',
      'controller class' => 'SEGTermController',
      'base table' => 'seg_term',
      'revision table' => 'seg_term_revision',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'term_id',
        'bundle' => 'type',
        'revision' => 'revision_id'
      ),
      'bundle keys' => array(
        'bundle' => 'type',
      ),
      'bundles' => array(
        'seg_term' => array(
          'label' => 'SEG Term',
          'admin' => array(
            'path' => 'admin/structure/seg_term/manage',
            'access arguments' => array('administer terms'),
          ),
        ),
      ),
      'load hook' => 'seg_term_load',
      'view modes' => array(
        'full' => array(
          'label' => t('Default'),
          'custom settings' => FALSE,
        )
      ),
      'label callback' => 'entity_class_label',
      'uri callback' => 'seg_term_uri',
      'module' => 'seg_term',
      'access callback' => 'seg_term_access',
    ),
  );
  return $return;
}
function seg_term_revision_list($term)
{
  
  
  $result = db_query(''
      . 'SELECT str.revision_id '
      
      . 'FROM {seg_term_revision} str '
      
      . 'WHERE str.term_id = :term_id '
      . 'ORDER BY str.revision_id DESC', array(':term_id' => $term->term_id));
  $items = array();
  foreach ($result as $revision) {
    print_r($revision);
    $revision_entity = entity_revision_load('seg_term', $revision->revision_id);
    $items[] = array(
      'data' => drupal_render(seg_term_view($revision_entity))
    );
  }

  $content['item_list'] = array(
    '#theme' => 'item_list',
    '#items' => $items,
    '#title' => t('Revisions'),
    '#type' => 'ul'
  );
  return $content;

}
function seg_term_field_extra_fields() {
  $extra['seg_term']['seg_term'] = array(
    'form' => array(
      'term' => array(
        'label' => t('Term Name'),
        'description' => t('Term Name Form Element'),
        'weight' => -5,
      ),
      'description' => array(
        'label' => t('Description'),
        'description' => t('Term Description form element'),
        'weight' => -4,
      )
    ),
    'display' => array(
      'term' => array(
        'label' => t('Term Name'),
        'description' => t('Term Name form element'),
        'weight' => -5,
      ),
      'description' => array(
        'label' => t('Description'),
        'description' => t('Term Description form element'),
        'weight' => -4,
      ),
      
    ),
  );
  return $extra;
}
function seg_term_access($permission, $term = null, $dictionary = null)
{
  global $user;
  switch($permission)
  {
    case 'create terms':
      return user_access('create terms', $user) && seg_dictionary_access('edit dictionary', $dictionary);
      break;
    case 'edit own terms':
      return user_access('edit own terms', $user) && (seg_dictionary_access('edit dictionary', $dictionary) || $term->uid = $user->uid);
      break;
    case 'edit any terms':
      return user_access('edit any terms', $user);
      break;
    case 'edit term':
      return seg_term_access('edit own terms', $term, $dictionary) || seg_term_access('edit any terms', $term, $dictionary);
      break;
    case 'view term':
      return user_access('access content');
      break;
  }
  return false;
}
function seg_term_form($form, &$form_state, $dictionary, $term = null)
{
  $form['dictionary_id'] = array(
    '#type' => 'hidden',
    '#value' => $dictionary->dictionary_id
  );
  $extra_fields = field_info_extra_fields('seg_term', 'seg_term', 'form');
  //print_r($extra_fields);
  $form['term'] = array(
    '#type' => 'textfield',
    '#title' => t('Term Name'),
    '#default_value' => isset($term) ? $term->term : '',
    '#required' => TRUE,
    '#weight' => $extra_fields['term']['weight']
  );
  $form['description'] = array(
    '#type' => 'textarea',
    '#title' => t('Term Description'),
    '#default_value' => isset($term) ? $term->description : '',
    '#required' => TRUE,
    '#weight' => $extra_fields['description']['weight']
  );
  
  if(isset($term))
  {
    $form['term_id'] = array(
      '#type' => 'hidden',
      '#value' => $term->term_id
    );
  } else {
    $term = entity_get_controller('seg_term')->create();
  }
  field_attach_form('seg_term', $term, $form, $form_state);
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => isset($term) ? t('Save Term') : t('Create Term'),
    '#weight' => 100
  );
  return $form;
}
function seg_term_title($term)
{
  return $term->term;
}
function seg_term_associate($term, $dictionary_id)
{
  db_merge('seg_term_dictionary')
      ->key(array('term_id' => $term->term_id, 'dictionary_id' => $dictionary_id))
      ->fields(array('term_id' => $term->term_id, 'dictionary_id' => $dictionary_id))
      ->execute();
}
function seg_term_form_submit($form, &$form_state)
{
  global $user;
  if(isset($form_state['values']['term_id']))
  {
    $term = seg_term_load($form_state['values']['term_id']);
    $term->term = $form_state['values']['term'];
    $term->description = $form_state['values']['description'];
    $term->uid = $user->uid;
    $term->is_new_revision = true;
  } else {
    $term = entity_get_controller('seg_term')->create($form_state['values']);
    
  }
  field_attach_submit('seg_term', $term, $form, $form_state);
  entity_save('seg_term', $term);
  seg_term_associate($term, $form_state['values']['dictionary_id']);
  $form_state['redirect'] = 'dictionary/' . $form_state['values']['dictionary_id'] . '/term/' . $term->term_id;
}
function seg_term_permission()
{
  return array(
    'administer terms' => array(
      'title' => t('Administer Terms'),
      'description' => t('Administer Terms')
    ),
    'create terms' => array(
      'title' => t('Create Terms'),
      'description' => t('Create Terms')
    ),
    'edit own terms' => array(
      'title' => t('Edit Own Terms'),
      'description' => t('Edit Own Terms')
    ),
    'edit any terms' => array(
      'title' => t('Edit Any Terms'),
      'description' => t('Edit Any Terms')
    )
  );
}
class SEGTerm extends Entity {

  protected function defaultLabel() {
    return html_entity_decode($this->term);
  }

  protected function defaultUri() {
    
    return array('path' => 'term/' . $this->identifier());
  }

}

class SEGTermController extends EntityAPIController {

  public function create(array $values = array()) {
    global $user;
    $values += array(
      'term' => '',
      'description' => '',
      'created' => REQUEST_TIME,
      'changed' => REQUEST_TIME,
      'uid' => $user->uid,
      'type' => 'seg_term'
    );
    return parent::create($values);
  }

  public function buildContent($entity, $view_mode = 'full', $langcode = NULL, $content = array()) {
    $wrapper = entity_metadata_wrapper('seg_term', $entity);
    $author = user_load($entity->uid);
    $content['author'] = array('#weight' => -1000, '#markup' => t('Created by: !author', array('!author' => format_username($author))));
    
//$content['author'] = array('#markup' => t('Created by: !author', array('!author' => $wrapper->uid->name->value(array('sanitize' => TRUE)))));
// Make Description and Status themed like default fields.
    $extra_fields = field_info_extra_fields('seg_term', 'seg_term', 'display');
    //print_r($extra_fields);
    $content['term'] = array(
      '#theme' => 'field',
      '#weight' => $extra_fields['term']['display'][$view_mode]['weight'],
      '#title' => t('Term'),
      '#access' => TRUE,
      '#label_display' => 'above',
      '#view_mode' => 'full',
      '#language' => LANGUAGE_NONE,
      '#field_name' => 'field_fake_title',
      '#field_type' => 'text',
      '#entity_type' => 'seg_term',
      '#bundle' => $entity->type,
      '#items' => array(array('value' => $entity->term)),
      '#formatter' => 'text_default',
      0 => array('#markup' => check_plain($entity->term))
    );
    $content['description'] = array(
      '#theme' => 'field',
      '#weight' => $extra_fields['description']['display'][$view_mode]['weight'],
      '#title' => t('Description'),
      '#access' => TRUE,
      '#label_display' => 'above',
      '#view_mode' => 'full',
      '#language' => LANGUAGE_NONE,
      '#field_name' => 'field_fake_description',
      '#field_type' => 'text',
      '#entity_type' => 'seg_term',
      '#bundle' => $entity->type,
      '#items' => array(array('value' => $entity->description)),
      '#formatter' => 'text_default',
      0 => array('#markup' => check_plain($entity->description))
    );

    return parent::buildContent($entity, $view_mode, $langcode, $content);
  }

}
function seg_term_menu()
{
  $menu = array();
  $menu['admin/structure/seg_term/manage'] = array(
    'title' => t('SEG Term'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('seg_term_admin_manage_form'),
    'access arguments' => array('administer terms'),
    'file' => 'seg_term.admin.inc'
  );
  $menu['dictionary/%seg_dictionary/terms'] = array(
    'title' => t('Term List'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('seg_term_dictionary_list_terms_form', 1),
    'access callback' => 'seg_dictionary_access',
    'access arguments' => array('view dictionary', 1),
    'type' => MENU_LOCAL_TASK
  );
  
  
  $menu['dictionary/%seg_dictionary/term/create'] = array(
    'title' => t('Create Term'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('seg_term_form', 1),
    'access callback' => 'seg_term_access',
    'access arguments' => array('create terms', null, 1),
    'type' => MENU_NORMAL_ITEM
  );
  
  $menu['dictionary/%seg_dictionary/term/%seg_term'] = array(
    'title callback' => 'seg_term_title',
    'title arguments' => array(3),
    'page callback' => 'seg_term_view',
    'page arguments' => array(3),
    'access callback' => 'seg_term_access',
    'access arguments' => array('view term', 3, 1),
    'type' => MENU_NORMAL_ITEM
  );
  
  $menu['dictionary/%seg_dictionary/term/%seg_term/view'] = array(
    'title' => t('View'),
    'page callback' => 'seg_term_view',
    'page arguments' => array(3),
    'access callback' => 'seg_term_access',
    'access arguments' => array('view term', 3, 1),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -100
  );
  $menu['dictionary/%seg_dictionary/term/%seg_term/dictionary'] = array(
    'title callback' => 'seg_dictionary_title',
    'title arguments' => array(1),
    'page callback' => 'seg_term_dictionary_return',
    'page arguments' => array(1),
    'access callback' => 'seg_term_access',
    'access arguments' => array('view term', 3, 1),
    'type' => MENU_LOCAL_TASK,
    'weight' => -101
  );
  $menu['dictionary/%seg_dictionary/term/%seg_term/edit'] = array(
    'title' => t('Edit Term'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('seg_term_form', 1, 3),
    'access callback' => 'seg_term_access',
    'access arguments' => array('edit term', 3, 1),
    'type' => MENU_LOCAL_TASK
  );
  $menu['dictionary/%seg_dictionary/term/%seg_term/delete'] = array(
    'title' => t('Delete Term'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('seg_term_delete_form', 1, 3),
    'access callback' => 'seg_term_access',
    'access arguments' => array('edit term', 3, 1),
    'type' => MENU_LOCAL_TASK
  );
  $menu['dictionary/%seg_dictionary/term/%seg_term/copy'] = array(
    'title' => t('Copy Term'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('seg_term_copy_form', 1, 3),
    'access callback' => 'seg_term_access',
    'access arguments' => array('edit term', 3, 1),
    'type' => MENU_LOCAL_TASK
  );
  $menu['dictionary/%seg_dictionary/term/%seg_term/history'] = array(
    'title' => t('Term History'),
    'page callback' => 'seg_term_revision_list',
    'page arguments' => array(3),
    'access callback' => 'seg_term_access',
    'access arguments' => array('edit term', 3, 1),
    'type' => MENU_LOCAL_TASK
  );
  return $menu;
}
function seg_term_dictionary_return($dictionary)
{
  drupal_goto('dictionary/' . $dictionary->dictionary_id);
}
function seg_term_theme($existing, $type, $theme, $path) {
  return array
    (
    'term__full' => array
      (
      'template' => 'term--full',
      'variables' => array('content' => null),
      'path' => drupal_get_path('module', 'seg_term') . '/template'
    ),
  );
}
function seg_term_view($term, $view_mode = 'full') {
  $term->content = entity_get_controller('seg_term')->buildContent($term, $view_mode);

  // Build fields content - this where the FieldAPI really comes in to play. The dictionary
  // is relatively trivial for us - it all gets taken care of by Drupal core.
  /* field_attach_prepare_view('seg_dictionary', array($dictionary->dictionary_id => $dictionary), $view_mode);
    entity_prepare_view('seg_dictionary', array($dictionary->dictionary_id => $dictionary));
    $dictionary->content += field_attach_view('seg_dictionary', $dictionary, $view_mode);
    //drupal_set_title($dictionary->description);
   */
  $term->content += array(
    '#theme' => 'term__' . $view_mode,
    '#content' => $term->content,
    '#view_mode' => $view_mode,
    '#language' => NULL,
  );
  return $term->content;
}
function seg_term_dictionary_random_terms($dictionaries = array(), $exclude = array(), $total = 0)
{
  $query = db_select('seg_term_dictionary', 'std');
  $query->fields('std', array('term_id'));
  $or = db_or();
  foreach($dictionaries as $dictionary)
  {
   
   $or->condition('std.dictionary_id', $dictionary->dictionary_id);
  }
  $query->condition($or);
  
    $query->orderRandom();
  
  if(!empty($exclude))
  {
    $query->condition('std.term_id', $exclude, 'NOT IN');
  }
  if($total > 0)
  {
    $query->range(0,$total);
  }
  $result = $query->execute();
  $terms = seg_term_load_multiple(array_keys($result->fetchAllAssoc('term_id')));
  return $terms;
}
function seg_term_dictionary_list_terms_form_submit($form, &$form_state)
{
  $form_state['rebuild'] = TRUE;
}
function seg_term_dictionary_list_terms_form($form, &$form_state, $dictionary)
{
  if(isset($form_state['values']['search_term']))
  {
    $search_term = $form_state['values']['search_term'];
  } else {
    $search_term = null;
  }
  $form['search_term'] = array(
    '#type' => 'textfield',
    '#title' => t('Search'),
    '#default_value' => isset($search_term) ? $search_term : ''
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search')
  );
  $form['results'] = array(
    '#markup' => drupal_render(seg_term_dictionary_list_terms($dictionary, false, array(), $search_term))
  );
  return $form;
}
function seg_term_dictionary_list_terms($dictionary, $random = false, $exclude = array(), $search_term = null)
{
  $query = db_select('seg_term_dictionary', 'std')->extend('PagerDefault');
  $query->leftJoin('seg_term', 'st', 'st.term_id = std.term_id');
  $query->fields('std', array('term_id'));
  $query->condition('std.dictionary_id', $dictionary->dictionary_id);
  if($random)
  {
    $query->orderRandom();
  }
  if(!empty($exclude))
  {
    $query->condition('std.term_id', $exclude, 'NOT IN');
  }
  if(isset($search_term))
  {
    $query->where("st.term LIKE '%" . $search_term . "%'");
  }
  $result = $query->execute();
  $terms = seg_term_load_multiple(array_keys($result->fetchAllAssoc('term_id')));
  $rows = array();
  foreach($terms as $term)
  {
    $rows[] = array(
      'term_name' => l($term->term, 'dictionary/' . $dictionary->dictionary_id . '/term/' . $term->term_id)
    );
  }
   $content['new_term'] = array(
    '#theme' => 'link',
    '#text' => 'New Term',
    '#path' => 'dictionary/' . $dictionary->dictionary_id . '/term/create',
    '#weight' => -100,
    '#options' => array(
      'attributes' => array('class' => array('button'), 'id' => 'new-task'),
      //REQUIRED:
      'html' => FALSE,
    ),
    '#access' => user_access('create terms')
  );
  $content['term_list'] = array(
    '#theme' => 'table',
    '#header' => array(t('Term Name')),
    '#rows' => $rows,
    '#empty' => t('No terms in dictionary.'),
    '#attributes' => array(
      ''
    )
  );
  $content['pager'] = array(
    '#theme' => 'pager'
  );
  return $content;
}
function seg_term_load($term_id, $reset = false) {
  $term_ids = (isset($term_id) ? array($term_id) : array());
  $term = seg_term_load_multiple($term_ids, array(), $reset);
  return $term ? reset($term) : FALSE;
}

function seg_term_load_multiple($term_ids = array(), $conditions = array(), $reset = false) {
  return entity_load('seg_term', $term_ids, $conditions, $reset);
}
?>
